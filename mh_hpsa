#!/bin/bash

# check_mk check f. HP Smart Array Controller
#
# 01/2011 Matthias Henze
# Lizenz: GPL v2

# sample output - requires hpacucli
#
#
# hpacucli controller all show 
#
#Smart Array P410 in Slot 4                (sn: PACCR9SY0AXY  )
#
#
# hpacucli controller slot=4 array all show 
#
# Example A
#
#Smart Array P410 in Slot 4
#
#   array A (SATA, Unused Space: 0 MB)
#
# Example B
#
# Smart Array 6i in Slot 0 (Embedded)
#
#   Array: A
#      Interface Type: Parallel SCSI
#      Unused Space: 0  MB
#      Status: OK
#      Array Type: Data
#
# hpacucli controller slot=4 array A physicaldrive all show
#
#Smart Array P410 in Slot 4
#
#   array A
#
#      physicaldrive 1I:1:1 (port 1I:box 1:bay 1, SATA, 500 GB, OK)
#      physicaldrive 1I:1:2 (port 1I:box 1:bay 2, SATA, 500 GB, OK)
#      physicaldrive 1I:1:3 (port 1I:box 1:bay 3, SATA, 500 GB, OK)
#      physicaldrive 1I:1:4 (port 1I:box 1:bay 4, SATA, 500 GB, OK, spare)
#
# Example B
#
#Smart Array 6i in Slot 0 (Embedded)
#
#   array A
#
#      physicaldrive 1:0   (port 1:id 0 , Parallel SCSI, 72.8 GB, OK)
#      physicaldrive 1:1   (port 1:id 1 , Parallel SCSI, 72.8 GB, OK)
#

function is_integer() {
    [ "$1" -eq "$1" ] > /dev/null 2>&1
    return $?
}

if [ -e  /proc/driver/cciss ] ; then

  echo '<<<hpsa_controller>>>'
  cc=-1
  CMD="hpacucli controller all show"
  while read -a cont; do
    if is_integer ${cont[5]}; then
      cc=$(($cc+1))
      read -a cstat <<< $(hpacucli controller slot=${cont[5]} show | grep "Controller Status")
      if [ "${cstat[2]}" = "OK" ]; then
        echo "${cont[5]} OK ${cont[2]}"
      else
        echo "${cont[5]} CRIT ${cont[2]}"
      fi
      controllers[$cc]=${cont[5]}
    fi
  done < <( $CMD )

  echo '<<<hpsa_array>>>'
  for c in $(seq 0 $cc)
  do
    ac=-1
    CMD="hpacucli controller slot=${controllers[$c]} array all show"
    while read -a cary; do
      if [ "X${cary[0]}X" = "XarrayX" ]; then
        ac=$(($ac+1))
        # collect lines
        hpacucli controller slot=${controllers[$c]} array ${cary[1]} show | perl -e '
               $/=undef;
               $data=<STDIN>;
               print("$1:$2 $5 Space: $4\n") 
                       if ($data =~ /in Slot ([0-9]+) .*Array: ?([^\n]+)\n.*Interface Type: ([^\n]+)\n.*Unused Space: ([0-9]+).*Status: ([^\n]+)\n/s); 
               print("$ARGV[0]:$1 OK Space: $3\n")  # The output above does not show status information for an array
                       if($data =~ /array ([a-zA-Z0-9]+) \(([^,]+), Unused Space: ([0-9]+) /);' "${controllers[$c]}"
        arrays[$ac]=${cary[1]}
      fi
    done < <( $CMD )
  done

  echo '<<<hpsa_drive>>>'
  for c in $(seq 0 $cc)
  do
    for a in $(seq 0 $ac)
    do
      CMD="hpacucli controller slot=${controllers[$c]} array ${arrays[$a]} physicaldrive all show"
      while read -a pdrv; do
        if [ "X${pdrv[0]}X" = "XphysicaldriveX" ]; then

	 # a lot more lines, but efficiently and fast done in bash
         # should also be more robust, because not being disturbed by unexpected space characters
         physical_id="${pdrv[1]}"
             port_id="${pdrv[*]}"
             port_id="${port_id##*(}"
             port_id="${port_id%%* ,}"
                tech="${pdrv[*]}"
                tech="${tech#*, }"
                tech="${tech%%,*}"
                size="${pdrv[*]}"
                size="${size#* , *, }"
                size="${size%%,*}"
                state="${pdrv[*]}"
               state="${state#*(*,*,*, }"
               state="${state%,*}"
               state="${state%)*}"
         if [[ "${pdrv[*]}" =~ \([^,]+,[^,]+,[^,]+,[^,]+, ]] ;then
               role="${pdrv[*]}"
               role="${role%)*}"
               role="${role##*, }"
         else 
               role="assigned"
         fi

          echo "${controllers[$c]}:${arrays[$a]}:${physical_id} $state $tech $size $role"
        fi
      done < <( $CMD )
    done
  done
fi
